name: 编译 OpenWrt 插件

on:
  workflow_dispatch:
    inputs:
      target:
        description: '目标平台/架构'
        required: true
        default: 'x86/64'
      firmware_version:
        description: '固件版本'
        required: true
        default: '23.05.5'
      plugin_source:
        description: '插件源码地址'
        required: true
        default: 'https://github.com/lj8812/luci-app-webrestrict.git'

jobs:
  build:
    runs-on: ubuntu-20.04
    env:
      PLUGIN_NAME: luci-app-webrestrict
      PLUGIN_VERSION: 1.0.0

    steps:
    - name: 检出代码
      uses: actions/checkout@v2
      
    - name: 安装依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ccache ecj fastjar file g++ gawk \
        gettext git java-propose-classpath libelf-dev libncurses5-dev \
        libncursesw5-dev libssl-dev python3 python3-distutils python3-setuptools \
        unzip wget rsync subversion swig time xsltproc zlib1g-dev tree

    - name: 设置 Python 软链接
      run: |
        sudo ln -sf /usr/bin/python3 /usr/bin/python

    - name: 设置目标变量
      id: set_target
      run: |
        TARGET_DASH=$(echo ${{ github.event.inputs.target }} | tr '/' '-')
        echo "TARGET_DASH=${TARGET_DASH}" >> $GITHUB_OUTPUT

    - name: 下载并解压 OpenWrt 源码
      run: |
        SDK_BASE_URL="https://downloads.openwrt.org/releases/${{ github.event.inputs.firmware_version }}/targets/${{ github.event.inputs.target }}/"
        SDK_FILE=$(curl -s $SDK_BASE_URL | grep -oP 'openwrt-sdk-.*?-${{ steps.set_target.outputs.TARGET_DASH }}_gcc-.*?Linux-x86_64.tar.xz' | head -n 1)
        if [ -z "$SDK_FILE" ]; then
          echo "::error::无法找到匹配的 SDK 文件"
          exit 1
        fi
        SDK_URL="${SDK_BASE_URL}${SDK_FILE}"
        echo "下载 SDK: $SDK_URL"
        wget $SDK_URL -O openwrt.tar.xz
        mkdir openwrt
        tar -xJf openwrt.tar.xz -C openwrt --strip-components 1

    - name: 克隆插件源码
      working-directory: openwrt/package
      run: |
        git clone --depth 1 ${{ github.event.inputs.plugin_source }} plugin
        
        # 修复Makefile格式
        cd plugin
        sed -i 's/^    /\t/' Makefile
        
        # 提取插件信息
        PLUGIN_NAME=$(grep 'PKG_NAME:=' Makefile | cut -d= -f2 | tr -d ' ')
        PLUGIN_VERSION=$(grep 'PKG_VERSION:=' Makefile | cut -d= -f2 | tr -d ' ')
        
        # 清理非法字符
        CLEAN_NAME=$(echo "${PLUGIN_NAME}" | tr -cd '[:alnum:]-_')
        CLEAN_VERSION=$(echo "${PLUGIN_VERSION}" | tr -cd '[:alnum:]._-')
        
        echo "PLUGIN_NAME=${CLEAN_NAME}" >> $GITHUB_ENV
        echo "PLUGIN_VERSION=${CLEAN_VERSION}" >> $GITHUB_ENV

    - name: 生成有效标签
      id: generate_tag
      run: |
        # 生成日期戳
        DATE_STAMP=$(date +%Y%m%d)
        # 清理固件版本号
        CLEAN_FW_VER=$(echo "${{ github.event.inputs.firmware_version }}" | tr -cd '[:alnum:]._-')
        # 组合标签
        TAG_NAME="v${CLEAN_FW_VER}-${DATE_STAMP}-${PLUGIN_NAME}"
        # 替换连续短划线
        TAG_NAME=$(echo "${TAG_NAME}" | sed 's/--/-/g')
        echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV

    - name: 创建并推送标签
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git tag -a "${{ env.TAG_NAME }}" -m "Release ${{ env.TAG_NAME }}"
        git push origin "${{ env.TAG_NAME }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 更新 feeds
      working-directory: openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 配置 OpenWrt
      working-directory: openwrt
      run: |
        echo "CONFIG_PACKAGE_${PLUGIN_NAME}=y" >> .config
        make defconfig

    - name: 编译插件
      working-directory: openwrt
      run: |
        make package/${PLUGIN_NAME}/compile V=s

    - name: 整理文件
      run: |
        mkdir -p firmware
        find openwrt/bin/packages/ -name "*.ipk" -exec cp {} firmware/ \;
        cd firmware
        for file in *.ipk; do
          new_name="${file%.*}-${{ steps.set_target.outputs.TARGET_DASH }}-${{ github.event.inputs.firmware_version }}.ipk"
          mv "$file" "$new_name"
        done

    - name: 创建 Release
      uses: softprops/action-gh-release@v1
      with:
        files: firmware/*
        tag_name: ${{ env.TAG_NAME }}
        name: "${{ env.PLUGIN_NAME }} ${{ env.PLUGIN_VERSION }}"
        body: |
          ### 编译信息
          - ​**目标平台**: ${{ github.event.inputs.target }}
          - ​**固件版本**: ${{ github.event.inputs.firmware_version }}
          - ​**编译时间**: $(date +'%Y-%m-%d %H:%M:%S')
          - ​**源码仓库**: [${{ github.event.inputs.plugin_source }}](${{ github.event.inputs.plugin_source }})

          ### 文件列表
          $(ls -1 firmware/*.ipk | sed 's/^/- `/' | sed 's/$/`/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
