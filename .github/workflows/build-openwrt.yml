name: 编译 OpenWrt 插件

on:
  workflow_dispatch:
    inputs:
      target:
        description: '目标平台/架构'
        required: true
        default: 'x86/64'
      firmware_version:
        description: '固件版本'
        required: true
        default: '23.05.5'
      plugin_source:
        description: '插件源码地址'
        required: true
        default: 'https://github.com/lj8812/OpenClash.git'

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: 检出代码
      uses: actions/checkout@v2
      
    - name: 安装依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ccache ecj fastjar file g++ gawk \
        gettext git java-propose-classpath libelf-dev libncurses5-dev \
        libncursesw5-dev libssl-dev python3 python3-distutils python3-setuptools \
        unzip wget rsync subversion swig time xsltproc zlib1g-dev tree
    
    - name: 设置 Python 软链接
      run: |
        sudo ln -sf /usr/bin/python3 /usr/bin/python
    
    - name: 设置目标变量
      id: set_target
      run: |
        echo "TARGET_DASH=$(echo ${{ github.event.inputs.target }} | sed 's/\//-/')" >> $GITHUB_OUTPUT
    
    - name: 下载并解压 OpenWrt 源码
      run: |
        SDK_BASE_URL="https://downloads.openwrt.org/releases/${{ github.event.inputs.firmware_version }}/targets/${{ github.event.inputs.target }}/"
        SDK_FILE=$(curl -s $SDK_BASE_URL | grep -oP 'openwrt-sdk-.*?-${{ steps.set_target.outputs.TARGET_DASH }}_gcc-.*?Linux-x86_64.tar.xz' | head -n 1)
        SDK_URL="${SDK_BASE_URL}${SDK_FILE}"
        wget $SDK_URL -O openwrt.tar.xz
        mkdir openwrt
        tar -xJf openwrt.tar.xz -C openwrt --strip-components 1
    
    - name: 克隆插件源码
      working-directory: openwrt/feeds/luci
      run: |
        mkdir -p applications
        cd applications
        git clone --depth 1 --filter=blob:none --sparse ${{ github.event.inputs.plugin_source }} luci-app-openclash
        cd luci-app-openclash
        git sparse-checkout init --cone
        git sparse-checkout set luci-app-openclash
        sed -i 's/^    /\t/' Makefile
        echo "::group::Makefile验证"
        cat -e -t -v Makefile | grep -m 3 '^\^I'
        echo "::endgroup::"
    
    - name: 更新 feeds
      working-directory: openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a -p luci
    
    - name: 配置依赖项
      working-directory: openwrt
      run: |
        cat << EOF >> .config
        CONFIG_PACKAGE_luci-app-openclash=m
        CONFIG_PACKAGE_dnsmasq-full=y
        CONFIG_PACKAGE_coreutils=y
        CONFIG_PACKAGE_bash=y
        CONFIG_PACKAGE_iptables=y
        CONFIG_PACKAGE_luci-compat=y
        CONFIG_PACKAGE_kmod-tun=y
        CONFIG_PACKAGE_kmod-inet-diag=y
        CONFIG_PACKAGE_ca-certificates=y
        EOF
        make defconfig
    
    - name: 编译插件
      working-directory: openwrt
      run: |
        make package/feeds/luci/luci-app-openclash/compile V=s
    
    - name: 收集产物
      run: |
        mkdir -p firmware
        find openwrt/bin -name "luci-app-openclash*.ipk" -exec cp {} firmware/ \;
        cd firmware
        for file in *.ipk; do
          new_name="${{ steps.set_target.outputs.TARGET_DASH }}-${{ github.event.inputs.firmware_version }}-${file}"
          mv "$file" "$new_name"
        done
        ls -lh
    
    - name: 创建 Release
      uses: softprops/action-gh-release@v1
      with:
        files: firmware/*
        name: OpenClash-${{ github.event.inputs.firmware_version }}-${{ steps.set_target.outputs.TARGET_DASH }}
        tag_name: openclash-${{ github.event.inputs.firmware_version }}-${{ steps.set_target.outputs.TARGET_DASH }}
        body: |
          目标平台: ${{ github.event.inputs.target }}
          OpenWrt版本: ${{ github.event.inputs.firmware_version }}
          源码仓库: ${{ github.event.inputs.plugin_source }}
          编译时间: $(date -u +'%Y-%m-%dT%H:%M:%SZ')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
